// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Prediction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Prediction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Prediction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Prediction", id.toString(), this);
  }

  static load(id: string): Prediction | null {
    return store.get("Prediction", id) as Prediction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get condition(): Bytes | null {
    let value = this.get("condition");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set condition(value: Bytes | null) {
    if (value === null) {
      this.unset("condition");
    } else {
      this.set("condition", Value.fromBytes(value as Bytes));
    }
  }

  get parent(): Bytes | null {
    let value = this.get("parent");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set parent(value: Bytes | null) {
    if (value === null) {
      this.unset("parent");
    } else {
      this.set("parent", Value.fromBytes(value as Bytes));
    }
  }

  get created(): BigInt {
    let value = this.get("created");
    return value.toBigInt();
  }

  set created(value: BigInt) {
    this.set("created", Value.fromBigInt(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get collateral(): Bytes | null {
    let value = this.get("collateral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collateral(value: Bytes | null) {
    if (value === null) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBytes(value as Bytes));
    }
  }

  get totalCollateral(): BigInt | null {
    let value = this.get("totalCollateral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalCollateral(value: BigInt | null) {
    if (value === null) {
      this.unset("totalCollateral");
    } else {
      this.set("totalCollateral", Value.fromBigInt(value as BigInt));
    }
  }

  get status(): BigInt | null {
    let value = this.get("status");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set status(value: BigInt | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromBigInt(value as BigInt));
    }
  }

  get timeout(): BigInt | null {
    let value = this.get("timeout");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeout(value: BigInt | null) {
    if (value === null) {
      this.unset("timeout");
    } else {
      this.set("timeout", Value.fromBigInt(value as BigInt));
    }
  }

  get probabilitiesTotal(): Array<BigInt> {
    let value = this.get("probabilitiesTotal");
    return value.toBigIntArray();
  }

  set probabilitiesTotal(value: Array<BigInt>) {
    this.set("probabilitiesTotal", Value.fromBigIntArray(value));
  }

  get probabilities(): Array<string> {
    let value = this.get("probabilities");
    return value.toStringArray();
  }

  set probabilities(value: Array<string>) {
    this.set("probabilities", Value.fromStringArray(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get outcome(): BigInt | null {
    let value = this.get("outcome");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outcome(value: BigInt | null) {
    if (value === null) {
      this.unset("outcome");
    } else {
      this.set("outcome", Value.fromBigInt(value as BigInt));
    }
  }

  get positionId(): BigInt | null {
    let value = this.get("positionId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set positionId(value: BigInt | null) {
    if (value === null) {
      this.unset("positionId");
    } else {
      this.set("positionId", Value.fromBigInt(value as BigInt));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Predictor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Predictor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Predictor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Predictor", id.toString(), this);
  }

  static load(id: string): Predictor | null {
    return store.get("Predictor", id) as Predictor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get predictions(): Array<string> | null {
    let value = this.get("predictions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set predictions(value: Array<string> | null) {
    if (value === null) {
      this.unset("predictions");
    } else {
      this.set("predictions", Value.fromStringArray(value as Array<string>));
    }
  }
}
