// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DistributorCreated extends ethereum.Event {
  get params(): DistributorCreated__Params {
    return new DistributorCreated__Params(this);
  }
}

export class DistributorCreated__Params {
  _event: DistributorCreated;

  constructor(event: DistributorCreated) {
    this._event = event;
  }

  get distributorAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get distributorIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DistributorTemplateChanged extends ethereum.Event {
  get params(): DistributorTemplateChanged__Params {
    return new DistributorTemplateChanged__Params(this);
  }
}

export class DistributorTemplateChanged__Params {
  _event: DistributorTemplateChanged;

  constructor(event: DistributorTemplateChanged) {
    this._event = event;
  }

  get _newTemplate(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SimpleDistributorFactory extends ethereum.SmartContract {
  static bind(address: Address): SimpleDistributorFactory {
    return new SimpleDistributorFactory("SimpleDistributorFactory", address);
  }

  createDistributor(): Address {
    let result = super.call(
      "createDistributor",
      "createDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_createDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createDistributor",
      "createDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  distributorsCount(): BigInt {
    let result = super.call(
      "distributorsCount",
      "distributorsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributorsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributorsCount",
      "distributorsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDistributorAddress(_index: BigInt): Address {
    let result = super.call(
      "getDistributorAddress",
      "getDistributorAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_getDistributorAddress(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDistributorAddress",
      "getDistributorAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  template(): Address {
    let result = super.call("template", "template():(address)", []);

    return result[0].toAddress();
  }

  try_template(): ethereum.CallResult<Address> {
    let result = super.tryCall("template", "template():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _template(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeTemplateCall extends ethereum.Call {
  get inputs(): ChangeTemplateCall__Inputs {
    return new ChangeTemplateCall__Inputs(this);
  }

  get outputs(): ChangeTemplateCall__Outputs {
    return new ChangeTemplateCall__Outputs(this);
  }
}

export class ChangeTemplateCall__Inputs {
  _call: ChangeTemplateCall;

  constructor(call: ChangeTemplateCall) {
    this._call = call;
  }

  get _newTemplate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeTemplateCall__Outputs {
  _call: ChangeTemplateCall;

  constructor(call: ChangeTemplateCall) {
    this._call = call;
  }
}

export class CreateDistributorCall extends ethereum.Call {
  get inputs(): CreateDistributorCall__Inputs {
    return new CreateDistributorCall__Inputs(this);
  }

  get outputs(): CreateDistributorCall__Outputs {
    return new CreateDistributorCall__Outputs(this);
  }
}

export class CreateDistributorCall__Inputs {
  _call: CreateDistributorCall;

  constructor(call: CreateDistributorCall) {
    this._call = call;
  }
}

export class CreateDistributorCall__Outputs {
  _call: CreateDistributorCall;

  constructor(call: CreateDistributorCall) {
    this._call = call;
  }

  get newDistributorAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
